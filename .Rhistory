as.tibble() %>%
slice(-1) %>%
select(-c(3, 4))
raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(3, 4)) #%>%
#rename(random_seed = 1, local_seed = 2, value_names = 3, values = 4)
raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(3, 4)) %>%
View()
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(3, 4))
#rename(random_seed = 1, local_seed = 2, value_names = 3, values = 4)
View(dat)
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(3, 4)) %>%
rename(random_seed = 1)#, local_seed = 2, value_names = 3, values = 4)
View(data())
View(dat
)
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(3, 4)) %>%
rename(random_seed = 1, local_seed = 2, value_names = 3, values = 4)
View(dat)
View(dat)
dat %>%
pivot_wider(names_from = value_names, values_from = values)
dat %>%
pivot_wider(names_from = value_names, values_from = values) %>%
View()
View(dat)
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3)
dat %>%
pivot_wider(names_from = value_names, values_from = values) %>%
View()
?rep
rep(seq(1:3), each=3)
unique(dat$local_seed)
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = rep(seq(1:length(unique(value_names)))), each = unique(local_seed)-1 )
dat <- raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = rep(seq(1:length(unique(value_names))), each = unique(local_seed)-1))
local_seed = with(dat, rep(seq(1:length(unique(value_names))), each = unique(local_seed)-1))
local_seed = with(dat,
rep(seq(1:length(unique(value_names))),
each = length(unique(local_seed))-1))
local_seed_ind = with(dat,
rep(seq(1:length(unique(value_names))),
each = length(unique(local_seed))-1))
dat = dat %>%
mutate(local_seed = local_seed_ind)
raw_data = fread('Data/ABM_Model_v2 Retail_1000_Runs_Seed_Controlled-spreadsheet.csv',
skip = 6, sep = ",", header = TRUE)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3)
nrow(dat)
nrow(dat)/249
num_values = dat %>%
select(value_names) %>%
unique() %>%
length()
66*249
66*248
length(unique(dat$value_names))
dat %>% summarise(value_names)
dat %>% summarise(value_names) %>% count()
dat %>% group_by(value_names) %>% count()
dat %>% group_by(value_names) %>% count() %>% print(n=66)
dat %>% group_by(value_names) %>% count() %>% print(n=67)
local_seed_ind = with(dat,
rep(seq(1:length(unique(value_names))),
each = length(unique(local_seed))-1),
length.out = nrow(dat))
dat = dat %>%
mutate(local_seed = local_seed_ind)
249*66
248*66
nrow(dat)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
fill(local_seed)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = TRUE)
library(data.table)
library(tidyverse)
library(epiR)
library(ggplot2)
raw_data = fread('Data/ABM_Model_v2 Retail_1000_Runs_Seed_Controlled-spreadsheet.csv',
skip = 6, sep = ",", header = TRUE)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
fill(local_seed)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = if_else(local_seed == "", NA, local_seed)) %>%
fill(local_seed)
?if_else
x <- c(-5:5, NA)
x
if_else(x < 0, NA_integer_, x)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = if_else(local_seed == "", NA_integer_, local_seed)) %>%
fill(local_seed)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = if_else(local_seed == "", factor(NA), local_seed)) %>%
fill(local_seed)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate_if(is.character, as.factor) %>%
mutate(local_seed = if_else(local_seed == "", factor(NA), local_seed)) %>%
fill(local_seed)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed)
class(dat$local_seed)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed) %>%
mutate_if(is.character, as.factor)
dat %>%
pivot_wider(names_from = value_names, values_from = values) %>%
View()
dat %>%
filter(value_names == "cb-prev-list") %>%
slice(1)
dat %>%
filter(value_names == "cb-prev-list") %>%
slice(1) %>%
summarise(values) %>%
mean()
dat %>%
filter(value_names == "cb-prev-list") %>%
slice(1) %>%
summarise(mean = mean(values))
dat$values[1]
dat$values[1] %>% mean()
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed) %>%
mutate_at(vars(local_seed, value_names), as.factor)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed) %>%
mutate_at(vars(local_seed, value_names), as.factor) %>%
mutate_at(values, as.numeric)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed) %>%
mutate_at(vars(local_seed, value_names), as.factor) %>%
mutate_at(vars(values), as.numeric)
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed)
class(dat$values)
dat
raw_data %>%
t() %>%
as.tibble()
dat = raw_data %>%
t() %>%
as.tibble() %>%
slice(-1) %>%
select(-c(1, 3, 4)) %>%
rename(local_seed = 1, value_names = 2, values = 3) %>%
mutate(local_seed = ifelse(local_seed == "", NA, local_seed)) %>%
fill(local_seed) %>%
mutate_at(vars(local_seed, value_names), as.factor)
dat = dat %>%
pivot_wider(names_from = value_names, values_from = values)
raw_data
head(raw_data)
raw_data[7,2]
raw_data[7,3]
raw_data[6,1]
raw_data[1,1]
raw_data[2,1]
raw_data[1,2]
raw_data[6,2]
raw_data[6,2] %>% class()
raw_data[6,2] %>% as.numeric()
#Utility functions
getMedianFromStrList = function(strList){
result = vector()
for (i in 1: length(strList)){
matches <- regmatches(strList[i], gregexpr("[[:digit:]]+", strList[i]))
med = median(as.numeric(unlist(matches)))
result[i] = med
}
return(result)
}
raw_data[6,2] %>% getMedianFromStrList()
raw_data[6,2] %>% as.list()
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list(width.cutoff = 60), tidy = TRUE)
library(tidyverse)
library(ggplot2)
library(readxl)
library(skimr)
# load the datasets
farmSurvey = read_csv("Data/Farm Survey data.csv")
microTest = read_csv("Data/Raw Milk Micro data.csv")
# merge the two datasets
surveyMicroData = left_join(farmSurvey, microTest, by = c("FarmID", "Sampling"))
# simplify column names
colnames(surveyMicroData) = c("FarmID", "Sampling", "Loc", "University", "CertYear", "HouseStyle",
"PastureTime", "StallNumPerArea", "CowNumPerArea", "StockDen", "Bedding",
"BedAdd","BedAddFreq", "StallCleanFreq", "CowNum", "MilkFreq", "PplNumPerWk",
"PplNumPerShift", "NonFamEmp", "NonFamEmpNum", "FullEmp", "FullEmpNum",
"PartEmp", "PartEmpNum", "Glove", "GloveFreq", "PreDip", "PreDipType",
"PostDip", "PostDipType", "UdderSti", "ClipFlame", "CowMilkLoc", "Parlor",
"ParlorClean", "CowParlorClean", "CowWaitMilk", "HoldClean", "CowHoldClean",
"TeatEndScore", "TeatPercent3to4", "UdderHygScore", "UdderPercent3to4",
"TowelType", "TowelCleanProto", "CowTowelWipe", "CornSilage", "Haylage",
"CornMeal", "DryHay", "Baleage", "GrassSillage", "Earlage", "Snaplage",
"OtherFeed", "BioFeedAdd", "DryMatPercent", "FeedPurchase", "Coop",
"ClosedHerd","FarmIDNum", "Test", "GreaterLess", "UneditConc", "Conc",
"Notes")
# skim data structure
#skim(surveyMicroData)
# modify specific surveyMicroDataa entries
surveyMicroData = surveyMicroData %>%
## stocking density
mutate(StockDen = ifelse(StockDen == "BEDDED PACK" |
StockDen == "PASTURE" |
StockDen == "DRY LOT", 0, StockDen),
StockDen = round(as.numeric(sub("%", "", StockDen))/100 ,2)) %>%
## cow number
mutate(CowNum = ifelse(CowNum == "??", NA, as.numeric(CowNum)),
CowNum = replace_na(CowNum, mean(CowNum, na.rm = TRUE))) %>%
## full employee number
mutate(FullEmpNum = ifelse(FullEmpNum == "3 family tend to robots", 0, FullEmpNum)) %>%
## Cows wiped with individual towels
mutate(CowTowelWipe = ifelse(CowTowelWipe == "robotic milker", 0, CowTowelWipe)) %>%
## Percentage of dry matter
mutate(DryMatPercent = case_when(
DryMatPercent %in% c("31-40%", "0-10%", "21-30%", "11-20%") ~ "< 40%",
DryMatPercent %in% c("41-50%", "51-60%", "61-70%", "> 40%") ~ "40-70%",
DryMatPercent %in% c(">70%", "> 70%") ~ "> 70%")) %>%
## Test
mutate(Test = ifelse(Test == "MSC`", "MSC", Test)) %>%
## The frequency of adding bedding
mutate(BedAddFreq = case_when(
BedAddFreq %in% c("<1x/day", "2x/week", "< 1x per day") ~ "< 1x per day",
BedAddFreq %in% c("4x per day", "2x per day") ~ ">= 2x per day",
BedAddFreq == "1x per day" ~ "1x per day")) %>%
## Bed additives
mutate(BedAdd = if_else(BedAdd %in% c("ashes", "bacteria, limestone", "gypsum", "oyster shells"),
"Other", BedAdd)) %>%
## Bedding materials
mutate(Bedding = if_else(Bedding %in% c("Other inorganic", "Recycled sand", "Sand"),
"Other inorganic", Bedding),
Bedding = if_else(Bedding %in% c("Sawdust", "Shavings"),
"Sawdust/shavings", Bedding)) %>%
## Bio feed additives
mutate(BioFeedAdd = if_else(BioFeedAdd == "None", "None", "Other")) %>%
## Cow milk location
mutate(CowMilkLoc = case_when(
grepl("parlor", CowMilkLoc) ~ "Parlor",
CowMilkLoc %in% c("Stanchions/tie stalls", "Walk through/flat barn") ~ "Stall/barn",
CowMilkLoc == "Robots" ~ "Robot")) %>%
## How many cows each towel wipes
mutate(CowTowelWipe = ifelse(CowTowelWipe <= 1, "0 ~ 1", "> 1")) %>%
## Housing style
mutate(HouseStyle = if_else(
HouseStyle %in% c("Dry lot", "Free stalls, Bedded pack", "Free stalls, Dry lot", "Pasture"),
"Other", HouseStyle)) %>%
## Post dip type
mutate(PostDipType = if_else(PostDipType == "Alcide based", "Other", PostDipType),
PostDipType = if_else(is.na(PostDipType), "No PostDip", PostDipType)) %>%
## Stall cleaning frequency
mutate(StallCleanFreq = if_else(
StallCleanFreq %in% c("< 1x/week", "1-3x/week", "1x per week", "3 or more times per week"),
"< 1x/day", StallCleanFreq)) %>%
## Udder stimulation
mutate(UdderSti = if_else(
UdderSti %in% c("Teats rubbed while cleaning", "Udder and teat massage", "Udder massage"),
"Other", UdderSti)) %>%
## change the towel type always to robot brush if the milk location is robot
mutate(TowelType = if_else(CowMilkLoc == "Robot", "Robot brush", TowelType)) %>%
## spread holding area cleaning practices into multiple variables
mutate(HoldHose = grepl("Hose", HoldClean),
HoldManScrap = grepl("Manual scraping", HoldClean),
HoldFluSys = grepl("Flush system", HoldClean),
HoldScrBru = grepl("Scrub brush", HoldClean)) %>%
select(-HoldClean) %>%
## spread parlor cleaning practices into multiple variables
mutate(ParlorHose = grepl("Hose", ParlorClean),
ParlorManScrap = grepl("Manual scraping", ParlorClean),
ParlorFluSys = grepl("system", ParlorClean),
ParlorDeter = grepl("Detergent", ParlorClean),
ParlorScrBru = grepl("Scrub brush", ParlorClean),
ParlorRobot = grepl("Robot", ParlorClean)) %>%
select(-ParlorClean) %>%
## spread towel cleaning protocol into two variables: bleach and drying
mutate(TowelChloDeter = grepl("Chlorinated detergent", TowelCleanProto),
TowelDeter = grepl("Detergent", TowelCleanProto),
TowelBleac = grepl("Bleach", TowelCleanProto),
TowelMacDry = grepl("Machine drying", TowelCleanProto),
TowelLaundry = grepl("Laundry service", TowelCleanProto),
TowelVinegar = grepl("Vinegar", TowelCleanProto),
TowelWashMac = grepl("Washing machine", TowelCleanProto)) %>%
select(-TowelCleanProto) %>%
## Full employee number
mutate(FullEmpNum = replace_na(FullEmpNum, "0"),
FullEmpNum = as.numeric(FullEmpNum)) %>%
select(-c(FullEmp)) %>%
## Part-time employee number
mutate(PartEmpNum = replace_na(PartEmpNum, 0),
PartEmpNum = as.numeric(PartEmpNum)) %>%
## Non family employee
mutate(NonFamEmpNum = replace_na(NonFamEmpNum, 0),
NonFamEmpNum = as.numeric(NonFamEmpNum)) %>%
## cow holding area cleaning
mutate(CowHoldClean = replace_na(CowHoldClean, "No holding area")) %>%
## glove change frequency
mutate(GloveFreq = replace_na(GloveFreq, "unknown")) %>%
## predipping type
mutate(PreDipType = replace_na(PreDipType, "No predip")) %>%
select(-c(PreDip)) %>%
## Remove useless columns (OtherFeed was removed due to high variability)
select(-c(OtherFeed, FarmIDNum, TeatPercent3to4, UdderPercent3to4, StallNumPerArea, CowNumPerArea, Notes))
## Check summary stats for single variable
#surveyMicroData %>%
#  group_by(Bedding) %>%
#  summarise(n = n()) %>%
#  mutate(freq = n/sum(n))
# load all weather data
weatherData = NULL
for (i in 1:102){
file_name = paste("Data/Weather Data/R", i, ".xlsx", sep = "")
excel_temp = read_excel(file_name)
weatherData = bind_rows(weatherData, excel_temp)
}
#skim(weatherData)
# retain only relevant predictors
weatherData = weatherData %>%
select(farmID, datetime, tempmax, tempmin, temp, dew, humidity, precip,
precipcover, windgust, windspeed, solarradiation)
# data preprocessing for weather variables
weatherData = weatherData %>%
mutate(windgust = replace_na(windgust, 0))
#  mutate(rain = grepl("\\brain\\b", preciptype),
#         snow = grepl("snow", preciptype),
#         ice = grepl("ice", preciptype),
#         freezingrain = grepl("freezingrain", preciptype)) %>%
#  select(-preciptype)
#  subset data into four data frames
weather_3d = weatherData %>% dplyr::slice(seq(1, n(), by = 4))
weather_2d = weatherData %>% dplyr::slice(seq(2, n(), by = 4))
weather_1d = weatherData %>% dplyr::slice(seq(3, n(), by = 4))
weather_0d = weatherData %>% dplyr::slice(seq(4, n(), by = 4))
# create new col names
weatherVars = colnames(weatherData)
colNames_1d = paste(weatherVars, "1d", sep = "_")
colNames_2d = paste(weatherVars, "2d", sep = "_")
colNames_3d = paste(weatherVars, "3d", sep = "_")
# assign new col names to data frames
colnames(weather_3d) = colNames_3d
colnames(weather_2d) = colNames_2d
colnames(weather_1d) = colNames_1d
colnames(weather_0d) = weatherVars
# combine the dataset
weatherData = bind_cols(weather_0d, weather_1d, weather_2d, weather_3d) %>%
rename(SampleTime = datetime,
FarmID = farmID) %>%
mutate(FarmID = paste("R", FarmID, sep = "")) %>%
select(-c(farmID_1d, farmID_2d, farmID_3d,
datetime_1d, datetime_2d, datetime_3d))
# create a dictionary that refers the sampling date from farm ID and sampling ID
Dict = read_excel("Data/SampleToDate.xlsx")
FarmID = Dict$FarmID
Dict = Dict[,-1] %>% as.data.frame()
rownames(Dict) = FarmID
# create a column in survey micro data set to include the sampling date
surveyMicroData$SampleTime = rep(NA, nrow(surveyMicroData))
for (i in 1:nrow(surveyMicroData)){
surveyMicroData$SampleTime[i] = Dict[surveyMicroData$FarmID[i], surveyMicroData$Sampling[i]] %>%
format(., "%Y-%m-%d")
}
# combine the survey micro data set and the weather data set
FarmData = left_join(surveyMicroData, weatherData, by = c("FarmID", "SampleTime"))
#skim(FarmData)
FarmData = FarmData %>%
mutate_if(is.logical, as.numeric) %>%
filter(!is.na(Test) & !is.na(Conc))
#skim(FarmData)
# prepare the dataset for modeling
skim(FarmData)
weatherVars
weatherData
weatherData %>% colnames()
FarmData$CowNum %>% hist()
FarmData$CowNum %>% log10() %>%  hist()
FarmData$Parlor %>% unique()
FarmData$Sampling %>% unique()
FarmData$SampleTime %>% unique()
FarmData$SampleTime %>% unique() %>% as.Date() %>% sort()
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list(width.cutoff = 60), tidy = TRUE)
## load packages
library(readr)
library(censReg)
library(fitdistrplus)
library(splitstackshape)
library(rmutil)
library(truncnorm)
library(EnvStats)
library(epiR)
library(stats)
library(reshape2)
library(caret)
library(vip)
library(numbers)
library(tidyverse)
## load functions
source("UtilityFunctions.R")
## AT frequency data (from Ariel_2017MC_SporeModel on MC-2020 on GitHub)
ATfreq = read.csv("InputFiles/Baseline_ATFreq.csv", stringsAsFactors = FALSE, header = TRUE)
## growth parameter data; make sure this contains growth parameters & growth model name
GrowthParas = read.csv("InputFiles/GrowthParameters_NoGrowthATs.csv" , stringsAsFactors = FALSE)
## initial microbial count data (from Ariel_2017MC_SporeModel on MC-2020 on GitHub)
InitConcData = read.csv("InputFiles/Baseline_InitialSporeCount.csv")
## Extract AT frequency
ATfreq = ATfreq %>% pull(ClosestAT)
GrowthParas = GrowthParas %>%
select(rpoBAT, lag, mumax, LOG10Nmax)
